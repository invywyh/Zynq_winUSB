/*
 * USB_serial.c
 *
 *  Created on: 08 Jun 2018
 *      Author: localadmin
 */
#include "USB_Serial.h"

#define RINGBUFFER_SIZE 64*1024

XUsbPs usb;

void reset_usb(void) {
	// Ensure that the PHY is out of reset
	volatile u32 *gpio_base;
	volatile u32 *gpio_oen;
	volatile u32 *gpio_dir;

	/* Ensure that the USB PHY is not in reset */
	//direct adressing see TRM chapter 4, 14 and appendix B19
	gpio_base = (u32 *)0xE000A000;
	gpio_oen = (u32 *)0xE000A208;
	gpio_dir = (u32 *)0xE000A204;

	*(gpio_oen) |= 0x00000080; //enable output
	*(gpio_dir) |= 0x00000080; //set pin as output
	*gpio_base = 0xff7f0080;   // update MIO7 with 1
}


void USB_serial_init(XScuGic intc){
	int status;
	//reset_usb();

	u32 *usb0_base = (u32 *) 0xE0002140 ; //usb0 + cmd offset
	*usb0_base = 0x00080002; //reset value + reset bit to 1

	while((*usb0_base & 0x2)>0){

	}



	xil_printf("USB reset \n\r");

	status = xusbps_cdc_register_interrupt(&intc, &usb, XPAR_PS7_USB_0_INTR);
	if (status != XST_SUCCESS) {
		xil_printf("ERROR: Unable to register USB interrupts: %d\n", status);
		exit(1);
	}

	status = xusb_cdc_init(&usb, XPAR_PS7_USB_0_DEVICE_ID, XPAR_PS7_USB_0_INTR, 64 * 1024);
	if (status != XST_SUCCESS) {
		xil_printf("ERROR: Unable to set up USB controller: %d\n", status);
		exit(1);
	}

}

int USB_serial_available(void){
	return xusb_cdc_rx_bytes_available();
}
int USB_serial_Read(u8 *buffer, u32 length){
	return xusb_cdc_receive_data(buffer, length);
}
int USB_serial_Write(u8 *buffer, u32 length){
	return xusb_cdc_send_data(&usb, buffer, length);
}


